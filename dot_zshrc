# ============================================================================
# ZSH Configuration
# ============================================================================

# VS Code/Cursor compatibility
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  POWERLEVEL9K_INSTANT_PROMPT=off
fi

# Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Oh My Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins
plugins=(git zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting zsh-autocomplete)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh
# ============================================================================
# GitHub Copilot Functions
# ============================================================================

# GitHub Copilot suggest wrapper
ghcs() {
  FUNCNAME="$funcstack[1]"
  TARGET="shell"
  local GH_DEBUG="$GH_DEBUG"

  read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot suggest\` to suggest a command based on a natural language description of the desired output effort.
	Supports executing suggested commands if applicable.

	USAGE
	  $FUNCNAME [flags] <prompt>

	FLAGS
	  -d, --debug              Enable debugging
	  -h, --help               Display help usage
	  -t, --target target      Target for suggestion; must be shell, gh, git
	                           default: "$TARGET"

	EXAMPLES

	- Guided experience
	  $ $FUNCNAME

	- Git use cases
	  $ $FUNCNAME -t git "Undo the most recent local commits"
	  $ $FUNCNAME -t git "Clean up local branches"
	  $ $FUNCNAME -t git "Setup LFS for images"

	- Working with the GitHub CLI in the terminal
	  $ $FUNCNAME -t gh "Create pull request"
	  $ $FUNCNAME -t gh "List pull requests waiting for my review"
	  $ $FUNCNAME -t gh "Summarize work I have done in issues and pull requests for promotion"

	- General use cases
	  $ $FUNCNAME "Kill processes holding onto deleted files"
	  $ $FUNCNAME "Test whether there are SSL/TLS issues with github.com"
	  $ $FUNCNAME "Convert SVG to PNG and resize"
	  $ $FUNCNAME "Convert MOV to animated PNG"
	EOF

  local OPT OPTARG OPTIND
  while getopts "dht:-:" OPT; do
    if [ "$OPT" = "-" ]; then
      OPT="${OPTARG%%=*}"
      OPTARG="${OPTARG#"$OPT"}"
      OPTARG="${OPTARG#=}"
    fi

    case "$OPT" in
    debug | d)
      GH_DEBUG=api
      ;;
    help | h)
      echo "$__USAGE"
      return 0
      ;;
    target | t)
      TARGET="$OPTARG"
      ;;
    esac
  done

  shift "$((OPTIND - 1))"

  TMPFILE="$(mktemp -t gh-copilotXXX)"
  trap 'rm -f "$TMPFILE"' EXIT
  if GH_DEBUG="$GH_DEBUG" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
    if [ -s "$TMPFILE" ]; then
      FIXED_CMD="$(cat $TMPFILE)"
      print -s "$FIXED_CMD"
      echo
      eval "$FIXED_CMD"
    fi
  else
    return 1
  fi
}

# GitHub Copilot explain wrapper
ghce() {
  FUNCNAME="$funcstack[1]"
  local GH_DEBUG="$GH_DEBUG"

  read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot explain\` to explain a given input command in natural language.

	USAGE
	  $FUNCNAME [flags] <command>

	FLAGS
	  -d, --debug   Enable debugging
	  -h, --help    Display help usage

	EXAMPLES

	# View disk usage, sorted by size
	$ $FUNCNAME 'du -sh | sort -h'

	# View git repository history as text graphical representation
	$ $FUNCNAME 'git log --oneline --graph --decorate --all'

	# Remove binary objects larger than 50 megabytes from git history
	$ $FUNCNAME 'bfg --strip-blobs-bigger-than 50M'
	EOF

  local OPT OPTARG OPTIND
  while getopts "dh-:" OPT; do
    if [ "$OPT" = "-" ]; then
      OPT="${OPTARG%%=*}"
      OPTARG="${OPTARG#"$OPT"}"
      OPTARG="${OPTARG#=}"
    fi

    case "$OPT" in
    debug | d)
      GH_DEBUG=api
      ;;
    help | h)
      echo "$__USAGE"
      return 0
      ;;
    esac
  done

  shift "$((OPTIND - 1))"

  GH_DEBUG="$GH_DEBUG" gh copilot explain "$@"
}

# ============================================================================
# Path and Environment
# ============================================================================

export PATH="$HOME/go/bin:$PATH"
export HOMEBREW_NO_AUTO_UPDATE="true"

# ============================================================================
# Aliases
# ============================================================================

alias cdg="cd ~/Documents/github"
alias nv="nvim"

# ============================================================================
# Theme and Prompt Configuration
# ============================================================================

# VS Code/Cursor theme handling
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  ZSH_THEME=""
  PROMPT='%n@%m:%~%# '
  RPROMPT=''
else
  ZSH_THEME="powerlevel10k/powerlevel10k"
  [[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
fi

# ============================================================================
# External Sources
# ============================================================================

source ~/.tokens
source ~/.bluffycomps
